plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.graalvm.buildtools.native' version '0.9.24'
}

group = 'com.ollamatrauma'
version = '2.0.0'
description = 'Cross-platform Ollama LLM management tool written in Java'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withSourcesJar()
    withJavadocJar()
}

application {
    mainClass = 'com.ollamatrauma.OllamaTrauma'
}

repositories {
    mavenCentral()
}

dependencies {
    // Jackson for JSON processing
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'
    
    // Optional HTTP client (using built-in HttpURLConnection by default)
    compileOnly 'org.apache.httpcomponents:httpclient:4.5.14'
    
    // Optional logging (using built-in System.out by default)
    compileOnly 'org.slf4j:slf4j-api:2.0.7'
    compileOnly 'ch.qos.logback:logback-classic:1.4.8'
    
    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.4.0'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Configure the shadow JAR (executable JAR with dependencies)
shadowJar {
    archiveBaseName = 'ollama-trauma'
    archiveClassifier = ''
    mergeServiceFiles()
    
    manifest {
        attributes(
            'Main-Class': 'com.ollamatrauma.OllamaTrauma',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version')
        )
    }
    
    // Exclude signature files
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

// Configure native image compilation
graalvmNative {
    binaries {
        main {
            imageName = 'ollama-trauma'
            mainClass = 'com.ollamatrauma.OllamaTrauma'
            
            buildArgs.addAll([
                '--no-fallback',
                '--enable-http',
                '--enable-https',
                '--allow-incomplete-classpath',
                '--initialize-at-build-time=com.fasterxml.jackson',
                '--initialize-at-run-time=com.fasterxml.jackson.databind.ext.Java7SupportImpl'
            ])
            
            // Add reflection configuration for Jackson
            resources {
                autodetect()
            }
        }
    }
    
    // Add native image resources
    metadataRepository {
        enabled = true
    }
}

// Custom tasks

// Task to create a distribution ZIP
task distZip(type: Zip) {
    dependsOn shadowJar
    
    archiveBaseName = 'ollama-trauma'
    archiveVersion = project.version
    
    from shadowJar.outputs.files
    from('src/main/resources') {
        include 'README.md'
        include 'LICENSE'
    }
    
    // Include shell scripts
    from(projectDir) {
        include '*.sh'
        include '*.bat'
        include '*.ps1'
        include '*.py'
        include '*.yml'
        include 'inventory.ini'
        include 'ansible.cfg'
    }
    
    into('ollama-trauma-' + project.version)
}

// Task to create a Windows executable wrapper
task createWindowsWrapper {
    doLast {
        def wrapperContent = """@echo off
setlocal

REM OllamaTrauma Java Windows Wrapper
REM Automatically detects Java and runs the application

set JAVA_EXE=java
set JAR_FILE=ollama-trauma.jar

REM Try to find Java
if defined JAVA_HOME (
    set JAVA_EXE=%JAVA_HOME%\\bin\\java
) else (
    where java >nul 2>nul
    if errorlevel 1 (
        echo Error: Java not found in PATH and JAVA_HOME not set
        echo Please install Java 11 or later and ensure it's in your PATH
        pause
        exit /b 1
    )
)

REM Set JVM arguments for better performance
set JVM_ARGS=-XX:+UseG1GC -Xms256m -Xmx1g

REM Run the application
"%JAVA_EXE%" %JVM_ARGS% -jar "%~dp0%JAR_FILE%" %*

endlocal
"""
        
        def wrapperFile = new File(buildDir, 'ollama-trauma.bat')
        wrapperFile.parentFile.mkdirs()
        wrapperFile.text = wrapperContent
    }
}

// Task to create a Unix shell wrapper
task createUnixWrapper {
    doLast {
        def wrapperContent = '''#!/bin/bash

# OllamaTrauma Java Unix Wrapper
# Automatically detects Java and runs the application

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
JAR_FILE="$SCRIPT_DIR/ollama-trauma.jar"

# Try to find Java
if [ -n "$JAVA_HOME" ]; then
    JAVA_EXE="$JAVA_HOME/bin/java"
elif command -v java &> /dev/null; then
    JAVA_EXE="java"
else
    echo "Error: Java not found in PATH and JAVA_HOME not set"
    echo "Please install Java 11 or later and ensure it's in your PATH"
    exit 1
fi

# Set JVM arguments for better performance
JVM_ARGS="-XX:+UseG1GC -Xms256m -Xmx1g"

# Run the application
"$JAVA_EXE" $JVM_ARGS -jar "$JAR_FILE" "$@"
'''
        
        def wrapperFile = new File(buildDir, 'ollama-trauma')
        wrapperFile.parentFile.mkdirs()
        wrapperFile.text = wrapperContent
        wrapperFile.executable = true
    }
}

// Task to build all distributions
task buildAll {
    dependsOn shadowJar, createWindowsWrapper, createUnixWrapper, distZip
    
    doLast {
        println "Build completed successfully!"
        println "Executable JAR: ${shadowJar.archiveFile.get().asFile.path}"
        println "Windows wrapper: ${buildDir}/ollama-trauma.bat"
        println "Unix wrapper: ${buildDir}/ollama-trauma"
        println "Distribution ZIP: ${distZip.archiveFile.get().asFile.path}"
    }
}

// Task to run with development profile
task runDev(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.ollamatrauma.OllamaTrauma'
    
    // Enable debug output
    systemProperty 'java.util.logging.config.file', 'src/main/resources/logging.properties'
    
    // Pass through system properties
    systemProperties System.getProperties()
    
    // Enable assertions
    jvmArgs '-ea'
    
    args = project.hasProperty('appArgs') ? project.appArgs.split(',') : []
}

// Configure jar manifest
jar {
    manifest {
        attributes(
            'Main-Class': 'com.ollamatrauma.OllamaTrauma',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version')
        )
    }
}

// Javadoc configuration
javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
}

// Compiler options
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-parameters']
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-parameters']
}

// Wrapper configuration
wrapper {
    gradleVersion = '8.3'
    distributionType = Wrapper.DistributionType.BIN
}

// Custom configuration for different environments
configurations {
    dev
    prod
}

// Environment-specific tasks
task runWithAnsible(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.ollamatrauma.OllamaTrauma'
    
    environment 'ANSIBLE_STDOUT_CALLBACK', 'json'
    environment 'ANSIBLE_MAIN_CHOICE', '1'
    environment 'ANSIBLE_SKIP_DEPS', 'true'
    
    args '--quiet'
}

// Performance testing
task perfTest(type: Test) {
    useJUnitPlatform {
        includeTags 'performance'
    }
    
    maxHeapSize = '2g'
    jvmArgs = ['-XX:+UseG1GC', '-XX:+PrintGC']
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
}

// Integration testing
task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags 'integration'
    }
    
    shouldRunAfter test
    
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}

// Check task dependencies
check.dependsOn integrationTest
